#!/bin/bash

compile() {
    source unix_compile.config
    build_type=$1 # Debug or Release
    target_name=$2

    target_arg=""
    if [ -n "$2" ]; then
        target_arg="--target target_name"
    fi

    # define build_path, but append Docker_ if it is run in a docker container
    build_path="./build/"
    if [ -n "${DOCKER}" ]; then
        build_path="${build_path}Docker_"
    fi
    build_path="${build_path}${build_type}${3}"

    # if you asked for clean, then remove all the files
    if [ "${target_name,,}" == "clean" ]; then
        if [ -d "${build_path}" ]; then
            rm -rf "${build_path}"
        fi
        return
    fi

    # create build path if it does not exist
    if [ ! -d "${build_path}" ]; then
        mkdir -p "${build_path}"
    fi

    n_jobs=$(grep -c ^processor /proc/cpuinfo) # get cpu count
    if [ -z "$max_jobs" ]; then
        max_jobs="$n_jobs"
    fi
    if [ "$n_jobs" -gt "$max_jobs" ]; then # clip the cpu count, otherwise compilation memory might explode
        n_jobs="$max_jobs"
    fi

    builder="make"
    cmake_builder_flag=""
    if [ -n "$build_system" ]; then
        if ! hash "$build_system" 2>/dev/null; then
            echo "ERROR: the requested build system $build_system was not found. Halting..."
            exit 1
        fi
        if [ "$build_system" == "ninja" ]; then
            cmake_builder_flag="-GNinja"
        fi
        builder="$build_system"
    fi

    # if we ask for test, we need to build first, then we can run tests
    run_tests=""
    if [ "$target_name" == "test" ]; then
        target_name="build_tests"
        run_tests="echo && echo '=========== Tests ============' &&  ${builder} run_tests"
    fi
    if [ "$target_name" == "coverage" ]; then
        target_name="build_tests all"
        run_tests="echo && echo '========= ${builder} tests =========' &&  ${builder} run_coverage"
    fi

    echo "============================="
    echo "building ${build_type} target"
    echo "============================="
    echo

    source_dir=$(pwd)
    pushd "${build_path}" &>/dev/null || exit 1
    echo "=========== CMake ==========="
    CC="${c_compiler}" CXX="${cpp_compiler}" cmake "${cmake_builder_flag}"  "${target_arg}" -D CMAKE_BUILD_TYPE="${build_type}" "${source_dir}" && \
    echo && \
    echo "=========== ${builder} ============" && \
    ${builder} -j"${n_jobs}" ${target_name} && eval "${run_tests}"
    # save the error code if one occured.
    error_code=$?
    popd &>/dev/null || exit 1

    # propagate the error out if an error code occured.
    if [ $error_code -ne 0 ]; then
        exit $error_code
    fi
}
